{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/CombineExtras\/documentation\/CombineExtras"},"abstract":[{"text":"Useful bridges between combine and Swift concurrency.","type":"text"}],"hierarchy":{"paths":[[]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"abstract":[{"type":"text","text":"Run async operations and transfrom them into the Combine world."}],"identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture"],"title":"Swift concurrency to Combine"},{"identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/Combine\/Publisher"],"title":"Combine to Swift concurrency","abstract":[{"type":"text","text":"Subscribe to publishers using Swift concurrency. This library provides multiple extensions to"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/Combine\/Publisher","isActive":true,"type":"reference"},{"text":" Protocol, to either await a single output of a publisher or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to transform a publisher into an async sequence that can be iterated using Swiftâ€™s built-in for"},{"type":"text","text":" "},{"text":"await in syntax.","type":"text"}]},{"title":"Enumerations","identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncPublisherError"]},{"identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/Combine"],"title":"Extended Modules"}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This library comes with a couple of tools to seamlessly transition combine into the Swift","type":"text"},{"type":"text","text":" "},{"text":"concurrency world and vice versa.","type":"text"}]},{"anchor":"Complete-Concurrency-Checking","level":2,"type":"heading","text":"Complete Concurrency Checking"},{"inlineContent":[{"text":"This library is compiled with complete-concurrency-checking enabled to pave the way towards","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"optional concurrency checking in Swift 6. All types are designed to be concurrency safe. This"},{"type":"text","text":" "},{"type":"text","text":"however also means that the values that are returned from async operations or published by publisher"},{"type":"text","text":" "},{"text":"need to be ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" too."}],"type":"paragraph"}]}],"kind":"symbol","metadata":{"modules":[{"name":"CombineExtras"}],"roleHeading":"Framework","title":"CombineExtras","externalID":"CombineExtras","symbolKind":"module","role":"collection"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/combineextras"]}],"references":{"doc://CombineExtras/documentation/CombineExtras/AsyncPublisherError":{"url":"\/documentation\/combineextras\/asyncpublishererror","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncPublisherError","title":"AsyncPublisherError","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncPublisherError"}],"type":"topic","kind":"symbol","abstract":[],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncPublisherError"}]},"doc://CombineExtras/documentation/CombineExtras/Combine/Publisher":{"type":"topic","kind":"symbol","role":"symbol","abstract":[],"title":"Publisher","fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"text":"Publisher","kind":"identifier","preciseIdentifier":"s:7Combine9PublisherP"}],"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/Combine\/Publisher","navigatorTitle":[{"text":"Publisher","kind":"identifier"}],"url":"\/documentation\/combineextras\/combine\/publisher"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncFuture"}],"kind":"symbol","abstract":[{"text":"A publisher that eventually produces a single value and then finishes or fails. It is","type":"text"},{"type":"text","text":" "},{"text":"specifically designed to run async\/await operations and forwards subscription cancellation to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the underlying task."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncFuture"}],"url":"\/documentation\/combineextras\/asyncfuture","title":"AsyncFuture","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture"},"doc://CombineExtras/documentation/CombineExtras/Combine":{"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/Combine","url":"\/documentation\/combineextras\/combine","type":"topic","kind":"symbol","abstract":[],"role":"collection","title":"Combine"},"doc://CombineExtras/documentation/CombineExtras":{"type":"topic","abstract":[{"type":"text","text":"Useful bridges between combine and Swift concurrency."}],"role":"collection","title":"CombineExtras","kind":"symbol","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras","url":"\/documentation\/combineextras"}}}