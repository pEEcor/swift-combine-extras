{"sections":[],"abstract":[{"type":"text","text":"A publisher that eventually produces a single value and then finishes or fails. It is"},{"type":"text","text":" "},{"text":"specifically designed to run async\/await operations and forwards subscription cancellation to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the underlying task."}],"metadata":{"symbolKind":"class","roleHeading":"Class","modules":[{"name":"CombineExtras"}],"platforms":[{"unavailable":false,"deprecated":false,"name":"iOS","beta":false,"introducedAt":"13.0"},{"beta":false,"name":"macOS","introducedAt":"10.15","unavailable":false,"deprecated":false},{"name":"tvOS","introducedAt":"13.0","unavailable":false,"deprecated":false,"beta":false},{"name":"watchOS","deprecated":false,"introducedAt":"6.0","unavailable":false,"beta":false}],"externalID":"s:13CombineExtras11AsyncFutureC","title":"AsyncFuture","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncFuture"}],"navigatorTitle":[{"text":"AsyncFuture","kind":"identifier"}],"role":"symbol"},"identifier":{"url":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/combineextras\/asyncfuture"]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"AsyncFuture","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Output","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Failure","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This Future bridges an async operation into the combine world. It runs the given operation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"immediately and publishes the output of the operation once it finishes. The Future also"},{"text":" ","type":"text"},{"type":"text","text":"propagates cancellation. If a subscriber of the publisher cancels its observation, then the"},{"type":"text","text":" "},{"text":"async operation will also be cancelled.","type":"text"}]},{"type":"heading","level":2,"text":"Drawbacks of other solutions","anchor":"Drawbacks-of-other-solutions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following code section. This solution can be found across numerous sources on the"},{"text":" ","type":"text"},{"text":"internet. However it has a serious drawback. Both, Combine and structured concurrency with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"async\/await have tools to cancel long running operations. The example below starts creates"},{"text":" ","type":"text"},{"text":"a future that emits once the output of the async operation is available. Cancelling the futures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"subscription however does not cancel the work that runs asyncronously inside the task."}]},{"code":["extension Future {","   public convenience init(","       operation: @Sendable @escaping () async throws -> Output","   ) {","       self.init { promise in","           Task {","               do {","                   let output = try await operation()","                   promise(.success(output))","               } catch {","                   promise(.failure(error))","               }","           }","       }","   }","}"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/CombineExtras\/documentation\/CombineExtras"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(_:)-7uo8o","doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(_:)-8cdwk","doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(attemptToFulfill:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/receive(subscriber:)"]},{"identifiers":["doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/Publisher-Implementations","doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/Publisher-Implementations"],"generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/CombineExtras\/7Combine9PublisherP","doc:\/\/CombineExtras\/s8SendableP"],"type":"conformsTo","title":"Conforms To"}],"kind":"symbol","references":{"doc://CombineExtras/documentation/CombineExtras/AsyncFuture/Publisher-Implementations":{"url":"\/documentation\/combineextras\/asyncfuture\/publisher-implementations","title":"Publisher Implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/Publisher-Implementations","kind":"article","abstract":[]},"doc://CombineExtras/documentation/CombineExtras":{"type":"topic","abstract":[{"type":"text","text":"Useful bridges between combine and Swift concurrency."}],"role":"collection","title":"CombineExtras","kind":"symbol","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras","url":"\/documentation\/combineextras"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture/init(attemptToFulfill:)":{"url":"\/documentation\/combineextras\/asyncfuture\/init(attempttofulfill:)","title":"init(attemptToFulfill:)","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"attemptToFulfill","kind":"externalParam"},{"text":": () ","kind":"text"},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Failure","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(attemptToFulfill:)","abstract":[{"type":"text","text":"Creates a publisher that emits a single result after the given async operation finishes."}],"kind":"symbol"},"doc://CombineExtras/7Combine9PublisherP":{"identifier":"doc:\/\/CombineExtras\/7Combine9PublisherP","title":"Combine.Publisher","type":"unresolvable"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AsyncFuture"}],"kind":"symbol","abstract":[{"text":"A publisher that eventually produces a single value and then finishes or fails. It is","type":"text"},{"type":"text","text":" "},{"text":"specifically designed to run async\/await operations and forwards subscription cancellation to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the underlying task."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AsyncFuture"}],"url":"\/documentation\/combineextras\/asyncfuture","title":"AsyncFuture","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture/init(_:)-8cdwk":{"url":"\/documentation\/combineextras\/asyncfuture\/init(_:)-8cdwk","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Output"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Failure"},{"text":" is ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}]},"title":"init(_:)","type":"topic","role":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"init"},{"text":"(() ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":")"}],"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(_:)-8cdwk","abstract":[{"type":"text","text":"Creates a publisher that emits a single value after the given async operation finishes."}],"kind":"symbol"},"doc://CombineExtras/s8SendableP":{"identifier":"doc:\/\/CombineExtras\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture/receive(subscriber:)":{"kind":"symbol","type":"topic","identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/receive(subscriber:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"subscriber"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"title":"receive(subscriber:)","role":"symbol","url":"\/documentation\/combineextras\/asyncfuture\/receive(subscriber:)"},"doc://CombineExtras/documentation/CombineExtras/AsyncFuture/init(_:)-7uo8o":{"url":"\/documentation\/combineextras\/asyncfuture\/init(_:)-7uo8o","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"init(_:)","type":"topic","role":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"kind":"text","text":"(() "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"text":")","kind":"text"}],"identifier":"doc:\/\/CombineExtras\/documentation\/CombineExtras\/AsyncFuture\/init(_:)-7uo8o","abstract":[{"type":"text","text":"Creates a publisher that emits a single value after the given async operation finishes."}],"kind":"symbol"}}}